// Generated by CoffeeScript 1.9.1
(function() {
  var camelCase, transform;

  require('chai').should();

  transform = require('../validation').transform;

  camelCase = require('../validation').camelCase;

  describe('transform tests', function() {
    it('should be a function', function() {
      return transform.should.be.a('function');
    });
    it('should make a dictionary like property => messages', function() {
      var data;
      data = [
        {
          property: 'name',
          messages: []
        }
      ];
      return transform(data).should.eql({
        name: []
      });
    });
    it('should make keys camelCased', function() {
      var data;
      data = [
        {
          property: 'Name',
          messages: []
        }
      ];
      return transform(data).should.eql({
        name: []
      });
    });
    it('should put items with empty property in _common key', function() {
      var data;
      data = [
        {
          property: '',
          messages: []
        }
      ];
      return transform(data).should.eql({
        _common: []
      });
    });
    it('should combine items messages with the same property', function() {
      var data;
      data = [
        {
          property: 'name',
          messages: ['qwe']
        }, {
          property: 'name',
          messages: ['asd']
        }
      ];
      return transform(data).should.eql({
        name: ['qwe', 'asd']
      });
    });
    describe('camelCase tests', function() {
      it('should be a function', function() {
        return camelCase.should.be.a('function');
      });
      it('should make strings camelCased', function() {
        return camelCase('QweAsd').should.eq('qweAsd');
      });
      return it('should make false values empty string', function() {
        return camelCase(null).should.eq('');
      });
    });
    return describe('integration tests', function() {
      return it('should transform validation messages into dictionary', function() {
        var data, res;
        data = [
          {
            property: 'UserName',
            messages: ['Name is required.', 'Name cannot contain swear words.', 'Name\'s length cannot exceed 1488 characters.']
          }, {
            property: 'UserAge',
            messages: ['Age is required.']
          }, {
            property: 'UserAge',
            messages: ['Age must be positive.']
          }, {
            property: '',
            messages: ['Server error.', 'Something wrong happened.']
          }
        ];
        res = transform(data);
        return res.should.eql({
          _common: ['Server error.', 'Something wrong happened.'],
          userName: ['Name is required.', 'Name cannot contain swear words.', 'Name\'s length cannot exceed 1488 characters.'],
          userAge: ['Age is required.', 'Age must be positive.']
        });
      });
    });
  });

}).call(this);
